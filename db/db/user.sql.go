// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email, password_hash, verified, verification_code
) VALUES (
    $1, $2, false, $3
)
RETURNING id, email, password_hash, verified, verification_code
`

type CreateUserParams struct {
	Email            string         `json:"email"`
	PasswordHash     string         `json:"password_hash"`
	VerificationCode sql.NullString `json:"verification_code"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.PasswordHash, arg.VerificationCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Verified,
		&i.VerificationCode,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findUserByIdAndVerification = `-- name: FindUserByIdAndVerification :one
SELECT id, email, password_hash, verified, verification_code FROM users
WHERE id = $1
AND verification_code = $2
`

type FindUserByIdAndVerificationParams struct {
	ID               int64          `json:"id"`
	VerificationCode sql.NullString `json:"verification_code"`
}

func (q *Queries) FindUserByIdAndVerification(ctx context.Context, arg FindUserByIdAndVerificationParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByIdAndVerification, arg.ID, arg.VerificationCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Verified,
		&i.VerificationCode,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password_hash, verified, verification_code FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Verified,
		&i.VerificationCode,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, verified, verification_code FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Verified,
		&i.VerificationCode,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, password_hash, verified, verification_code FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PasswordHash,
			&i.Verified,
			&i.VerificationCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setVerification = `-- name: SetVerification :one
UPDATE users
SET verified = true
WHERE id = $1
AND verification_code = $2
RETURNING id, email, password_hash, verified, verification_code
`

type SetVerificationParams struct {
	ID               int64          `json:"id"`
	VerificationCode sql.NullString `json:"verification_code"`
}

func (q *Queries) SetVerification(ctx context.Context, arg SetVerificationParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setVerification, arg.ID, arg.VerificationCode)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Verified,
		&i.VerificationCode,
	)
	return i, err
}

const updateVerificationCode = `-- name: UpdateVerificationCode :exec
UPDATE users
SET verification_code = $1
WHERE id = $2
`

type UpdateVerificationCodeParams struct {
	VerificationCode sql.NullString `json:"verification_code"`
	ID               int64          `json:"id"`
}

func (q *Queries) UpdateVerificationCode(ctx context.Context, arg UpdateVerificationCodeParams) error {
	_, err := q.db.ExecContext(ctx, updateVerificationCode, arg.VerificationCode, arg.ID)
	return err
}
