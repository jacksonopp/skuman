// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: session.sql

package db

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  session_id, user_id, expires_at
) VALUES (
  $1, $2, $3
)
RETURNING id, session_id, user_id, created_at, expires_at
`

type CreateSessionParams struct {
	SessionID string    `json:"session_id"`
	UserID    int64     `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession, arg.SessionID, arg.UserID, arg.ExpiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE expires_at < now()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE session_id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, deleteSession, sessionID)
	return err
}

const getSessionBySessionId = `-- name: GetSessionBySessionId :one
SELECT sessions.session_id, sessions.expires_at, users.id, users.email FROM sessions
INNER JOIN users ON sessions.user_id=users.id
WHERE session_id = $1
`

type GetSessionBySessionIdRow struct {
	SessionID string    `json:"session_id"`
	ExpiresAt time.Time `json:"expires_at"`
	ID        int64     `json:"id"`
	Email     string    `json:"email"`
}

func (q *Queries) GetSessionBySessionId(ctx context.Context, sessionID string) (GetSessionBySessionIdRow, error) {
	row := q.db.QueryRowContext(ctx, getSessionBySessionId, sessionID)
	var i GetSessionBySessionIdRow
	err := row.Scan(
		&i.SessionID,
		&i.ExpiresAt,
		&i.ID,
		&i.Email,
	)
	return i, err
}

const isSessionExpired = `-- name: IsSessionExpired :one
SELECT EXISTS (
  SELECT id FROM sessions
  WHERE expires_at < now()
  AND session_id = $1
)
`

func (q *Queries) IsSessionExpired(ctx context.Context, sessionID string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isSessionExpired, sessionID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateSession = `-- name: UpdateSession :one
UPDATE sessions
SET expires_at = $1
WHERE session_id = $1
RETURNING id, session_id, user_id, created_at, expires_at
`

func (q *Queries) UpdateSession(ctx context.Context, expiresAt time.Time) (Session, error) {
	row := q.db.QueryRowContext(ctx, updateSession, expiresAt)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.UserID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
